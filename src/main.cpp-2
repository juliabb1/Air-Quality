// Project: Simple Multi-Geiger
// (c) 2019,2020 by the authors, see AUTHORS file in toplevel directory.
// Licensed under the GPL v3 (or later), see LICENSE file in toplevel directory.

#include <Arduino.h>
#include "thp_sensor.h"
#include "display.h"

// for LoRa
#include "loraWan.h"

float currentVoltage=0;
char  ssid[30];
uint8_t tx_paylad[8];

#define TTN_MESSAGING_INTERVAL  20// in seconds
static unsigned long transmission_timestamp = millis(); 


void read_THP(unsigned long current_ms,
              bool *have_thp, float *temperature, float *humidity, float *pressure) {
  static unsigned long last_timestamp = 0;
  // first call: immediately query thp sensor
  // subsequent calls: only query every MEASUREMENT_INTERVAL

    *have_thp = read_thp_sensor(temperature, humidity, pressure);

}

//
//
//
void generate_payload(float temperature, float humidity, float pressure,  float currentVoltage ) {
  uint32_t temp_Binary = temperature * 100;
  uint32_t humidityBinary = humidity * 100;
  uint32_t pressureBinary = pressure * 100;
  
  uint32_t currentVoltage_Binary = ((currentVoltage) * 1000);

  uint8_t payload[18];

  
  payload[0] = ( temp_Binary >> 8 ) & 0xFF;
  payload[1] = temp_Binary & 0xFF;

  payload[2] = ( humidityBinary >> 8 ) & 0xFF;
  payload[3] = humidityBinary & 0xFF;

  payload[4] = ( pressureBinary >> 8 ) & 0xFF;
  payload[5] = pressureBinary & 0xFF;

  payload[6] = (currentVoltage_Binary >> 8) & 0xFF;
  payload[7] = currentVoltage_Binary  & 0xFF;
  
  
  int i = 0;
  while (i < sizeof(payload)) {
    tx_payload[i] = payload[i];
    i++;
  }
}
//
//
//
void sendData2TTN(int sendwhat,  uint8_t * ttndata) {
  //Serial.println("sendData2TTN");
  int cnt;
  cnt = 18;
  lorawan_send(1,ttndata,cnt,false,NULL,NULL,NULL);
}
//
//
//
void setup() {
  Serial.begin(115200);
  setup_display();
  setup_thp_sensor();
  adcAttachPin(37);
}

void loop() {
unsigned long current_ms = millis();  // to save multiple calls to millis()
  static bool have_thp = true;
  static float temperature = 0.0, humidity = 0.0, pressure = 0.0;

  read_THP(current_ms, &have_thp, &temperature, &humidity, &pressure);

  Serial.print("temperature ");
  Serial.println(temperature);
  Serial.print("humidity ");
  Serial.println(humidity);
  Serial.print("pressure ");
  Serial.println(pressure);
  display_thp(temperature, humidity, pressure); 
  
  Serial.println("-------");
  float vBat;
  float val = analogRead(37);
  vBat = val * (3.3/4095) * ((220+100)/100) ;
  
  generate_payload(temperature, humidity, pressure, vBat);
  delay(500);
  if ((millis() - transmission_timestamp) >= (TTN_MESSAGING_INTERVAL * 1000)) {
    //DisplayGMC(100,200,300,true,false);
    transmission_timestamp=millis();
   Serial.println("Sending to TTN ...");
    sendData2TTN(1,tx_payload);
    delay(200);
  }
  
}
