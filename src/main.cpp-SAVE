#include <Arduino.h>
// Fix Parameters
// Possible Values for Serial_Print_Mode  ! DONT TOUCH !
//
// Skatch to measure the outdoor termperature with a DS1820 onewire temp sensor
// send the temperature via TTN and forward it to my home server
//

#define   Serial_None            0  // No Serial Printout
#define   Serial_Debug           1  // Only debug and error output will be printed via RS232(USB)
#define   Serial_Logging         2  // Log measurement as table via RS232(USB)
#define   Serial_One_Minute_Log  3  // One Minute logging will be printed via RS232(USB)
#define   Serial_Statistics_Log  4  // Lists time between two events in us via RS232(USB)

// Usable CPU-Types
// WIFI -> Heltev Wifi Kit 32
#define WIFI 0
// LORA  ->  Heltec Wifi Lora 32 (V2)
#define LORA 1
// STICK ->  Heltec Wireless Stick  (has LoRa on board)
#define STICK 2
//
// Includes
//====================================================================================================================================
#include "userdefines.h"
//==================================================================================================================================
#include <Arduino.h>
#include <U8x8lib.h>

char          ssid[30];
//==================================================================================================================================
// inclue Lora support
//==================================================================================================================================
#include "loraWan.h"
#include "display.h"
//==================================================================================================================================
// Temperatur
// define to which GPIO Pin the DS1820 is connected
// Includes for the DS1820 Temperatur sensor
//==================================================================================================================================
#include <OneWire.h>
#include <DallasTemperature.h>
#include "RTClib.h"

// define to which GPIO Pin the DS1820 is connected
#define ONE_WIRE_BUS 13
#define TEMPERATURE_PRECISION 9
//==================================================================================================================================
// The temp sensor has an address - it is recommeded to read the address once and than hardcode
// this address - I have the coede to read the address in - but commented out follwo label hs001
// hs001 code to get the IO address of ds1820 sensor 
//OneWire  ds(14);  // on pin 10 (a 4.7K resistor is necessary)
// TTN Send message interval (default 5min = 300 sec)) [sec]
#define TTN_MESSAGING_INTERVAL  20 // in seconds
static unsigned long transmission_timestamp = millis(); 

// Setup a oneWire instance to communicate with a OneWire device
OneWire oneWire(ONE_WIRE_BUS);
// Pass our oneWire reference to Dallas Temperature sensor 
DallasTemperature sensors(&oneWire);
// Define the device addresses of the DS1820 -- get the addresses by using the main-read-tempAddr.cpp
DeviceAddress sensor1 = { 0x10, 0x70, 0x20, 0x1E, 0x03, 0x08, 0x00, 0x24 };
// currently only one sensor is implemented so I comment the following code
//DeviceAddress sensor2 = { 0x28, 0xFC, 0x6F, 0x79, 0x97, 0x10, 0x03, 0x08 };
//DeviceAddress sensor3 = { 0x28, 0x53, 0x69, 0x79, 0x97, 0x10, 0x03, 0xEC };
//DeviceAddress sensor4 = { 0x28, 0x20, 0xE5, 0x79, 0x97, 0x09, 0x03, 0x99 };//10 1B E8 1D 3 8 0 8B 

// will hold the temperatur value of the first, 2nd, 3rd, .... DS1820 sensor
float         t1_ds1820              = 0.0;      // hs001
int32_t           t1_ds1820_int          = 0;        // to send it via TTN it should be an integer
                                                 // the float value is multiplied by 100 to get the integer
//float         t2_ds1820              = 0.0;      // hs001
//float         t3_ds1820              = 0.0;      // hs001
//float         t4_ds1820              = 0.0;      // hs001
//==================================================================================================================================
// rtc support - however currently not working 
DateTime now;
RTC_DS3231 rtc;
char daysOfTheWeek[7][12] = {"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"};

//==================================================================================================================================
// get the chip id 
//==================================================================================================================================
unsigned long getESPchipID() {
  uint64_t espid = ESP.getEfuseMac();
  uint8_t *pespid = (uint8_t*)&espid;
  uint32_t id = 0;
  uint8_t *pid = (uint8_t *)&id;
  pid[0] = (uint8_t)pespid[5];
  pid[1] = (uint8_t)pespid[4];
  pid[2] = (uint8_t)pespid[3];
  Serial.printf("ID: %08X\n", id);
  Serial.printf("MAC: %04X%08X\n",(uint16_t)(espid>>32),(uint32_t)espid);
  return id;
}
//==================================================================================================================================
// LoRa payload:
// to minimise airtime, we only send necessary bytes. We do NOT use Cayenne LPP.
// The payload will be translated via http integration and a small python program
// to be compatible with luftdaten.info. For byte definitions see ttn2luft.pdf in
// docs directory
//==================================================================================================================================
void sendData2TTN(int event, int tbd, unsigned int temperature) {
  Serial.println("in sendData2TTN");
  Serial.print("temperature = ");
  Serial.println(temperature);
  Serial.println("data buffer to be sent = ");
  unsigned char ttnData[20];
  for (int i=0; i < 20; i++) {
     ttnData[i] = 0x00;
  };
  
  ttnData[0] = event;
  ttnData[1] = tbd;
  ttnData[2] = (byte) ((temperature & 0xFF000000) >> 24);
  ttnData[3] = (byte) ((temperature & 0x00FF0000) >> 16);
  ttnData[4] = (byte) ((temperature & 0x0000FF00) >> 8);
  ttnData[5] = (byte) ((temperature & 0x000000FF));
  int cnt;
  cnt = 6;
  Serial.print("0= ");
  Serial.println(ttnData[0], HEX);
  Serial.print("1= ");
  Serial.println(ttnData[1], HEX);
  Serial.print("2= ");
  Serial.println(ttnData[2], HEX);
  Serial.print("3= ");
  Serial.println(ttnData[3], HEX);
  Serial.print("4= ");
  Serial.println(ttnData[4], HEX);
  Serial.print("5= ");
  Serial.println(ttnData[5], HEX);
  Serial.print("6= ");
  Serial.println(ttnData[6], HEX);
  Serial.println("");
  
  lorawan_send(1,ttnData,cnt,false,NULL,NULL,NULL);
}
//****************************************************************************************************
//*** setup routine
//****************************************************************************************************
void setup()
{
  Serial.begin(115200);
  delay(1000);
  Serial.println("Let's go!");
  uint32_t xx = getESPchipID();

  // build SSID
  sprintf(ssid,"ESP32-%d",xx);
  Serial.println(ssid);

  //==================================================================================================================================
  Serial.println("calling setup_display");
  setup_display();
  delay(1000);
  //==================================================================================================================================
  // Initialize real time clock and ads1115
  //==================================================================================================================================
  if (! rtc.begin()) {
    Serial.println("Couldn't find RTC");
    delay(1000);
  }
  //rtc.adjust(DateTime(2021, 1, 11, 18, 06, 0));
  now = rtc.now();
  Serial.print("now time = ");
  Serial.print(now.year(), DEC);
  Serial.print('/');
  Serial.print(now.month(), DEC);
  Serial.print('/');
  Serial.print(now.day(), DEC);
  Serial.print(" (");
  Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
  Serial.print(") ");
  Serial.print(now.hour(), DEC);
  Serial.print(':');
  Serial.print(now.minute(), DEC);
  Serial.print(':');
  Serial.print(now.second(), DEC);
  Serial.println();
  if (rtc.lostPower()) {
    Serial.println("RTC lost power, lets set the time!");
    // following line sets the RTC to the date &amp; time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date &amp; time, for example to set
    // January 21, 2014 at 3am you would call:
   rtc.adjust(DateTime(2021, 1, 12, 11, 19, 0));
  }
  //==================================================================================================================================
  // init LoRa
  //==================================================================================================================================
  lorawan_setup();
} // end of setup

//****************************************************************************************************
// main loop
//****************************************************************************************************
void loop()
{
  // just for test purpose - send the that to a dummy endpoit to see if data is correct
  #if SEND2DUMMY
    displayStatusLine(F("Toilet"));
    Serial.println("SENDING TO TOILET"); 
    sendData2http(TOILET,SEND_CPM,hvp,true);
    delay(300);
  #endif
    // here I have to code to read the address of the ds1820 temp sensor - remove comment statement
    // get the address - hardcode the address - comment this code again
    // hs001 code to get io address of ds1820 sensor - dev. is already known and hard coded
    
    /*
    byte i;
    byte present = 0;
    byte type_s;
    byte data[12];
    byte addr[8];
    float celsius, fahrenheit;
    if ( !ds.search(addr)) {
      Serial.println("No more addresses.");
      Serial.println();
      ds.reset_search();
      delay(250);
      return;
    }
    Serial.print("ROM =");
    for( i = 0; i < 8; i++) {
      Serial.write(' ');
      Serial.print(addr[i], HEX);
    }

    if (OneWire::crc8(addr, 7) != addr[7]) {
      Serial.println("CRC is not valid!");
      return;
    }
    Serial.println();
    
    */
    //end hs001

  //===============================================================================================
  // read the Temperature value
  // calculate the integer value (get rid of the comma)
  //===============================================================================================
  sensors.requestTemperatures(); // Send the command to get temperatures
  t1_ds1820=sensors.getTempC(sensor1);
  t1_ds1820_int = t1_ds1820*100;
  Serial.print("Sensor 1(*C): ");
  Serial.println(t1_ds1820); 
  now = rtc.now();
  Serial.print("now time = ");
  Serial.print(now.year(), DEC);
  Serial.print('/');
  Serial.print(now.month(), DEC);
  Serial.print('/');
  Serial.print(now.day(), DEC);
  Serial.print(" (");
  Serial.print(daysOfTheWeek[now.dayOfTheWeek()]);
  Serial.print(") ");
  Serial.print(now.hour(), DEC);
  Serial.print(':');
  Serial.print(now.minute(), DEC);
  Serial.print(':');
  Serial.print(now.second(), DEC);
  Serial.println();
  // *************************************************************************************************
  // have to send the data? send in the interval of TTN_MESSAGING_INTERVAL
  // *************************************************************************************************
  if ((millis() - transmission_timestamp) >= (TTN_MESSAGING_INTERVAL * 1000)) {
    //DisplayGMC(100,200,300,true,false);
    transmission_timestamp=millis();
 
    Serial.println("Sending to TTN ...");
    Serial.println(t1_ds1820_int);
    sendData2TTN(1,0, t1_ds1820_int);
    // print state of switch
    Serial.println("data sent");
  }
}